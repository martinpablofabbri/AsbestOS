			+-----------------------+
			|         CS 124        |
			| PROJECT 2: BOOTLOADER |
			|    DESIGN DOCUMENT    |
			+-----------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

AsbestOS

Keegan    Ryan      karyan@caltech.edu
Jalen     Green     jpgreen@caltech.edu
Martin    Fabbri    mfabbri@caltech.edu

>> Specify how many late tokens you are using on this assignment:

>> What is the Git repository and commit hash for your submission?
   (You only need to include the commit-hash in the file you submit
   on Moodle.)

   Repository URL: https://github.com/keeganryan/AsbestOS
   commit ...

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course instructors.

			     PC BOOTER
			     =========

---- LOGISTICS ----

These questions will help us to keep track of the difficulty level of
assignments, as well as keeping track of which team members worked on
which parts.

>> L1: How many hours did each team member spend on this assignment?
   Make sure that each member's total time is listed.

Keegan    Ryan      18
Jalen     Green     2
Martin    Fabbri    7

>> L2: What did each team member focus on for this assignment?  Keep
   descriptions to 25-30 words or less.

Keegan    Ryan      Bootloader; interrupts; keyboard; video;
Jalen     Green     game design; game framework
Martin    Fabbri    game logic;


Note that this design document is a bit long.  Most of the questions can be
answered pretty briefly.  Don't feel a need to write a long answer if it is
not required by the question.

			     GAME / DEMO
			     ===========

---- ALGORITHMS ----

>> A1: In 25-30 words or less, what does your PC booter do?

The PC booter copies the sectors containing the ELF file to memory, switches to
protected mode, finds the start address, and then calls the entry point of the
program.

>> A2: In 25-30 words or less, how does the user interact with the program?
>> What are the controls?  What should the user try to do?
The keys in the home row are the controls. ASDF controls the left paddle and
JKL; controls the right paddle. The user should try to catch the falling balls.
The game can be played by one player (with good coordination) or two.

---- DATA STRUCTURES ----

>> A3: Describe any global state that your program manages in order to
>> perform its operations.  Don't focus on state managed within interrupt
>> handlers; we will look at that later.  Rather, focus on state that is
>> part of the game implementation itself.
We have a global game state which contains information about the left and
right half of the screen. Each half contains a paddle, a score, and a
doubly linked list of balls. The balls are allocated in a static array,
and when we want to use a new ball, we search through this array for a
ball that is not in use.

---- SYNCHRONIZATION ----

>> A4: From the perspective of the entire program, briefly describe how
>> the various interrupts are handled and processed within your program.
>> For example, when a timer interrupt occurs, what is the general sequence
>> of operations or updates that is performed within your program?
>> Similarly, when a keyboard interrupt occurs, what does your program do
>> in response?
There is a global variable for the timer called the delay. If the delay is
positive, each tick decrements this variable. We interface with the timer
by using a sleep() function, which sets the delay and waits for it to equal 0.

When a keyboard interrupt occurs, the scancode is added to a circular buffer.
Every iteration of the game loop, the scancodes in the circular buffer are
processed and used to update a global variable representing the state of the keys.
Then the other parts of the program can query this state.

>> A5: Would you say your program relies on polling or busy-waiting anywhere
>> to accomplish its tasks?  If so, what tasks?
It does that for sleep_cs(), but nowhere else.

---- RATIONALE ----

>> A6: Why did you choose the project you did?
We wanted a game that had two halves, since the screen was about twice as long
as it was wide. We thought that this game would be feasible to implement,
fun to play, and demonstrate all the necessary parts of the assignment.

>> A7: Did your choice of project affect any of the specific implementation
>> details of the various subsystems that you needed to use?  (For example,
>> if you implemented a scrolling game, did you implement specialized high-
>> performance video code to scroll the screen?)
No. We finished the subsystems before finalizing the game.

>> A8: Did you run into any technical or resource limitations in the
>> implementation of your program?  (For example, bootloader didn't fit,
>> or a really useful standard library wasn't available, or you couldn't
>> achieve the desired performance level, etc.)  If so, what steps did you
>> take to try to overcome those limitations?
The lack of a memory allocator was a challenge for creating new balls. To
get around this, we used an array of balls, all flagged as not in use. When
the program requests a new ball, we search for a ball marked not in use,
mark it as in use, and return a pointer to it. Then to free, we marked the
ball as not in use again.
We also implemented a prng (Mersenne Twister) so that the balls would fall
from pseudorandom positions.

			     BOOT SECTOR
			     ===========

---- DATA STRUCTURES ----

>> B1: How did you decide to store the Disk Address Packet?  Does the
>> memory occupied by the DAP get reclaimed after it is used?  If not,
>> why not?
We pushed it onto the stack. Memory is not reclaimed because it's only
16 bytes, and we didn't feel that it was worth going back and changing this.

>> B2: Does your bootloader pass any information to the main program?
>> (If not, just say no.)  If so, what information is passed, and how
>> is it passed?
no.

---- ALGORITHMS ----

>> B3: Briefly describe how your bootloader brings your program into
>> memory.  Does it perform one large load, or multiple smaller loads?
It performs one large load.

>> B4: Did you add any BIOS calls to your bootloader to prepare for your
>> main program?  (i.e. things that aren't available in protected mode)
No.

			  VIDEO SUBSYSTEM
			  ===============

---- DATA STRUCTURES ----

>> C1: What video display mode does your program use?  Is it a text mode
>> or a graphical mode?  Where does the video buffer start?  How is data
>> represented in this mode?  (Please be brief; we don't need complete
>> documentation on the video system.)
We use text mode, with the default representation from video.c

>> C2: Does your video code maintain any variables or data structures to
>> facilitate video output?  Briefly describe these values and their
>> purposes here.
No, we redraw everything from fresh every frame.

---- ALGORITHMS ----

>> C3: What abstraction does your video code present to your main program?
>> Briefly describe the higher-level operations you decided to implement.
The video code takes the game state, and draws on the screen accordingly.
We abstract away things like drawing balls or the scores in the corner, but
don't have many general purpose functions.

---- RATIONALE ----

>> C4: Did you take any specific steps to improve the appearance of your
>> program's display output?  For example, using Extended ASCII Codes, or
>> choosing specific colors to represent different things?
We used different colors for different objects because we thought it looked
cooler.

			  TIMER SUBSYSTEM
			  ===============

---- DATA STRUCTURES ----

>> D1: What state does your timer subsystem manage?  Describe the variables
>> or data structures that it maintains, and how they are used.
It has one variable: delay.
When the timer interrupt is called, delay is decremented if not zero.
When sleep is called, the delay is set to the number of centiseconds to wait
and sleep loops until delay has been decremented to zero.

---- ALGORITHMS ----

>> D2: What abstraction does your timer code present to your main program?
>> Briefly describe the higher-level operations you decided to implement.
sleep_cs(), or sleep for the specified number of centiseconds. Described above.

>> D3: Did you change the timer frequency from 100Hz?  If so, what did you
>> change it to, and why?
No.

---- SYNCHRONIZATION ----

>> D4: Given how your program handles timer events, is there any potential
>> for timer interrupts to generate race conditions in updating your
>> program's global state?  If so, what steps did you take to ensure that
>> such situations cannot occur?
No. We only use the timer for sleeping.

			KEYBOARD SUBSYSTEM
			==================

---- DATA STRUCTURES ----

>> E1: What state does your keyboard subsystem manage?  Describe the variables
>> or data structures that it maintains, and how they are used.
It maintains an array where the indices are key identifiers and the values are
key states. This array is accessed by the game state update function and is
modified once every cycle of the game loop by processing all new scancodes
since the last cycle.

>> E2: How do your data structures handle keys with multi-byte scan-codes?
We discard any scancodes we don't recognize and hope that there's no conflict
with the later bytes of a multi-byte scancode.

---- ALGORITHMS ----

>> E3: What abstraction does your keyboard code present to your main program?
>> Briefly describe the higher-level operations you decided to implement.
It presents the is_pressed() function, where the caller can query to see if
a given key is currently pressed.

>> E4: Does your keyboard subsystem expose scan-codes directly to your main
>> program, or does it preprocess them and expose other information to your
>> main program?  If scan-code data is preprocessed, briefly describe what
>> information is actually exposed, and how it is derived from scan-codes.
It preprocesses them so the main program only needs to know the enum value
corresponding to a key.

---- SYNCHRONIZATION ----

>> E5: Given how your keyboard interrupt handler operates, is there any
>> potential for race conditions in updating the keyboard subsystem's
>> internal state?  If so, what steps did you take to ensure that such
>> situations cannot occur?
We disable interrupts whenever we add or remove from the circular buffer,
so we cannot be interrupted during that.

>> E6: Given how your program handles keyboard events, is there any
>> potential for keyboard interrupts to generate race conditions in updating
>> your program's global state?  If so, what steps did you take to ensure
>> that such situations cannot occur?
No. The main program checks the global state array, which is not updated
when an interrupt fires.

---- RATIONALE ----

>> E7: Why did you choose the design and data representation that your
>> keyboard subsystem uses?  How is it suited to your program's overall
>> operation?
It provided a familiar interface for the main program (is_pressed()) and
it is relatively easy to show that there are no race conditions.

			  SURVEY QUESTIONS
			  ================

Answering these questions is optional, but it will help us improve the
course in future years.  Feel free to tell us anything you want - these
questions are just to spur your thoughts.  Also, feel free to be completely
honest if there are issues with the assignment or the course - you won't be
penalized.  We can't fix things until we know about them.  :-)

>> In your opinion, was this assignment, or any of the parts of it, too
>> easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Were there any parts of the assignment that you felt were unnecessarily
>> tedious or pointless?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the instructor and/or TAs to more
>> effectively assist students, either for future quarters or the remaining
>> projects?

>> Any other comments?

