            +------------------+
            |      CS 124      |
            | PROJECT 1: SHELL |
            |  DESIGN DOCUMENT |
            +------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

AsbestOS

Keegan    Ryan      karyan@caltech.edu
Jalen     Green     jpgreen@caltech.edu
Martin    Fabbri    mfabbri@caltech.edu

>> Specify how many late tokens you are using on this assignment:

>> What is the Git repository and commit hash for your submission?
   (You only need to include the commit-hash in the file you submit
   on Moodle.)

   Repository URL: https://github.com/keeganryan/AsbestOS
   commit ...

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please include them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course instructors.

               COMMAND SHELL
               =============

---- LOGISTICS ----

These questions will help us to keep track of the difficulty level of
assignments, as well as keeping track of which team members worked on
which parts.

>> L1: How many hours did each team member spend on this assignment?
   Make sure that each member's total time is listed.

Keegan    Ryan      12
Jalen     Green     8
Martin    Fabbri    9


>> L2: What did each team member focus on for this assignment?  Keep
   descriptions to 25-30 words or less.

Keegan    Ryan      Take data structure and run processes
Jalen     Green     Set up git repo; main shell loop; command data structure;
                    input prompt
Martin    Fabbri    Parse and token;


---- DATA STRUCTURES ----

>> A1: Describe how your command shell manages parsing and executing
>> commands that contain arguments and pipes, using the example
>> command "a arg1 arg2 | b arg1 | c arg1 arg2 arg3".  How does your
>> shell internally represent such a command?

The shell parses a command with pipes by creating a linked list of individual
commands where each linked list is responsible for all the file descriptors
for each command. There is the observation that only the first command can
have a different file input and only the last one can have a different file
output; so you check those cases and set up the pipes in between.

>> A2: Now, given the command:
>> "a arg1 arg2 < inp.txt | b arg1 | c arg1 arg2 arg3 > out.txt"
>> Briefly explain specifically how the redirections are parsed and
>> represented, and by what processes.

The parsing saves into the command data structure which of the commands have
inputs and outputs different than stdin/stdout. The default values are NULL,
which allows for the pipes to be established between the commands and the file
descriptors to be opened in the correct way. The parsing is done in the read.c
file and the file descriptors are managed in eval.c

---- ALGORITHMS ----

>> A3: Illustrate how you solved the problem of setting up
>> redirection in a simple command like "a < inp.txt > out.txt", by
>> describing what process takes care of the redirection and when.

The parser in read.c specifies the input/output/and error file descriptors for
every command as a string of the filename to be opened (NULL values represent
stdin/stdout/stderr). These strings are passed to the eval.c file where the
file descriptor is opened for each file.

>> A4: Illustrate how you solved the problem of setting up the pipes
>> between multiple operations in a single command, by describing
>> what each process is responsible for.  For example, given the
>> command "a | b | c", describe the sequence of steps in setting up
>> the processes and their pipes, starting with your command shell's
>> process, and going through the execution of programs a, b and c.
>> Keep your description of each process' responsibilities limited to
>> ~25 words or less.

The command shell maintains an open file descriptor to the input for the
next pipe. It creates a new pipe for output of the command (or opens a
file if redirecting). It then forks and closes these file descriptors,
except for the output of the pipe.

The child inherits all these file descriptors. It closes the output of the
pipe since it doesn't need it. It copies the file descriptors to stdin,
stdout, and stderr and then closes the others.

>> A5: Similarly, describe the details of how terminated processes are
>> reaped in the example command "a | b | c".

We maintain a count of the spawned processes, and then call wait() that
many times.

>> A6: Similarly, describe which processes are responsible for setting
>> up the redirections in the example command
>> "a < inp.txt | b | c > out.txt".

The parent process sets up all file descriptors, and the children
are only responsible for copying them to the standard inputs and outputs.

---- RATIONALE ----

>> A7: Why must the chdir and exit commands be implemented as built-in
>> functions, rather than external programs?

Since external programs are run in a different process, they will have
no effect on the parent. However, the parent needs to be updated by
cd and exit.

>> A8: Why did you ultimately choose this design?  In what ways is it
>> superior to other designs you considered as you developed your solution?
We chose this design because it would allow us to work in parallel. By
focusing on the command datastructure as a central aspect, we could
separate the concerns between parsing and spawning processes.

              SURVEY QUESTIONS
              ================

Answering these questions is optional, but it will help us improve the
course in future years.  Feel free to tell us anything you want - these
questions are just to spur your thoughts.  Also, feel free to be completely
honest if there are issues with the assignment or the course - you won't be
penalized.  We can't fix things until we know about them.  :-)

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Were there any parts of the assignment that you felt were unnecessarily
>> tedious or pointless?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the instructor and/or TAs to more
>> effectively assist students, either for future quarters or the remaining
>> projects?

>> Any other comments?
