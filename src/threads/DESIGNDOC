                        +--------------------+
                        |       CS 124       |
                        | PROJECT 3: THREADS |
                        |   DESIGN DOCUMENT  |
                        +--------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

AsbestOS

Keegan    Ryan      karyan@caltech.edu
Jalen     Green     jpgreen@caltech.edu
Martin    Fabbri    mfabbri@caltech.edu

>> Specify how many late tokens you are using on this assignment:

>> What is the Git repository and commit hash for your submission?

   Repository URL: https://github.com/keeganryan/AsbestOS
   commit ...

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course instructors.

                             ALARM CLOCK
                             ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

// threads/thread.c
struct thread {
    int64_t clock; // The clock time when a thread finished sleeping
}
struct list blocked_list; // a list of all blocked threads, including
                          // sleeping threads.
static int64_t alarm; // The clock tick value of the next wake-up time
                      // for a sleeping thread.

---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.

When timer_sleep is called, the thread's clock value is set to the time
at which it can stop sleeping; the thread is then blocked. A static alarm
field keeps track of when the soonest alarm should go off (i.e., when the
next-to-wake thread is done sleeping). When the alarm field is surpassed
by the timer_ticks() function, we then go through all the blocked threads
to find all threads that need waking. WE keep track of the clock-value of
the next thread to wake up, and set the alarm to that after.

>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?

We only look for a thread to wake when we know there is one that is ready
to wake up. We also avoid looking for threads to wake up

---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?

TODO

>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?

TODO

---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

TODO

                         PRIORITY SCHEDULING
                         ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

// threads/thread.h
#define NUM_PRIORITIES 64
struct thread {
    int base_priority; // Priority which the process assigns to itself.
                       // When relinquishing a donation, the process
                       // returns to it's base priority, even if it's
                       // changed while the donated priority was held.
    struct list donors; // List to keep track of which threads donated
                        // a higher priority to the thread.
    struct thread * donee; // The thread that received a donation
    struct list_elem donor_elem; // the doner element in the list
}

// threads/thread.c
static struct list ready_priority_lists[NUM_PRIORITIES];
        // A separate list of threads for each priority level. This is in
        // place of struct list ready_list.

void add_to_ready_queue(struct thread *t);
        // A helper function to add a thread to the correct ready list



>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation.  (Alternately, submit a
>> .png file.)

        +----------------------------------------------------------+
        |                       thread_1                           |
        +----------------------------------------------------------+
        |                                                          |
        |   +-------------------+  +---------------------------+   |
        |   |   donors (list)   |  |   donee (struct thread)   |   |
        |   +-------------------+  +---------------------------+   |
        |   |      donor_1      |  |         donee             |   |
        |   |      donor_2      |  +------------+--------------+   |
        |   |      ....         |               ^                  |
        |   |      donor_N      |               |                  |
        |   +-------------------+               |                  |
        |                                       |                  |
        +---------------------------------------+------------------+
     ___________________________________________/
    /
    |   +----------------------------------------------------------+
    |   |                       thread_2                           |
    |   +----------------------------------------------------------+
    |   |                                                          |
    |   |   +-------------------+  +---------------------------+   |
    |   |   |   donors (list)   |  |   donee (struct thread)   |   |
    |   |   +-------------------+  +---------------------------+   |
    |   |   |      donor_1      |  |         donee             |   |
    +---+---+----> donor_2      |  +---------------------------+   |
        |   |      ....         |                                  |
        |   |      donor_N      |                                  |
        |   +-------------------+                                  |
        |                                                          |
        +----------------------------------------------------------+

When thread_1 donates it's priority to thread_2, thread_2 keeps track of
all the threads that have donated it's priority. TODO


---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

Since we have a seperate list for each priority, we iterate through each
list by highest priority first.

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

TODO

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

TODO

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

TODO

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

TODO

                          ADVANCED SCHEDULER - TODO
                          ==================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> C2: Suppose threads A, B, and C have nice values 0, 1, and 2.  Each
>> has a recent_cpu value of 0.  Fill in the table below showing the
>> scheduling decision and the priority and recent_cpu values for each
>> thread after each given number of timer ticks:

timer  recent_cpu    priority   thread
ticks   A   B   C   A   B   C   to run
-----  --  --  --  --  --  --   ------
 0
 4
 8
12
16
20
24
28
32
36

>> C3: Did any ambiguities in the scheduler specification make values
>> in the table uncertain?  If so, what rule did you use to resolve
>> them?  Does this match the behavior of your scheduler?

>> C4: How is the way you divided the cost of scheduling between code
>> inside and outside interrupt context likely to affect performance?

---- RATIONALE ----

>> C5: Briefly critique your design, pointing out advantages and
>> disadvantages in your design choices.  If you were to have extra
>> time to work on this part of the project, how might you choose to
>> refine or improve your design?

>> C6: The assignment explains arithmetic for fixed-point math in
>> detail, but it leaves it open to you to implement it.  Why did you
>> decide to implement it the way you did?  If you created an
>> abstraction layer for fixed-point math, that is, an abstract data
>> type and/or a set of functions or macros to manipulate fixed-point
>> numbers, why did you do so?  If not, why not?

                           SURVEY QUESTIONS
                           ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the feedback survey on the course
website.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
