                        +--------------------+
                        |       CS 124       |
                        | PROJECT 3: THREADS |
                        |   DESIGN DOCUMENT  |
                        +--------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

AsbestOS

Keegan    Ryan      karyan@caltech.edu
Jalen     Green     jpgreen@caltech.edu
Martin    Fabbri    mfabbri@caltech.edu

>> Specify how many late tokens you are using on this assignment:
    TODO: 0/1

>> What is the Git repository and commit hash for your submission?

   Repository URL: https://github.com/keeganryan/AsbestOS
   commit ...

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course instructors.

                             ALARM CLOCK
                             ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

// threads/thread.c
struct thread {
    int64_t clock; // The clock time when a thread finished sleeping
}
struct list blocked_list; // a list of all blocked threads, including
                          // sleeping threads.
static int64_t alarm; // The clock tick value of the next wake-up time
                      // for a sleeping thread.

---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.

When timer_sleep is called, the thread's clock value is set to the time
at which it can stop sleeping; the thread is then blocked. A static alarm
field keeps track of when the soonest alarm should go off (i.e., when the
next-to-wake thread is done sleeping). When the alarm field is surpassed
by the timer_ticks() function, we then go through all the blocked threads
to find all threads that need waking. WE keep track of the clock-value of
the next thread to wake up, and set the alarm to that after.

>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?

We only look for a thread to wake when we know there is one that is ready
to wake up. We also avoid looking for threads to wake up

---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?

Each thread keeps track of when it should wake up.

>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?

We disbale interrupts within the timer_sleep call.

---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

This design takes advantage of the fact that we don't bother to look for
a thread to wake before it's ready to be woken. Another design considered
involved modifying the scheduler to not choose a thread that is sleeping,
but keet it in the ready queue. That design has serious problems when all
the threads in the ready queue are sleeping.

                         PRIORITY SCHEDULING
                         ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

// threads/thread.h
#define NUM_PRIORITIES 64
struct thread {
    int base_priority; // Priority which the process assigns to itself.
                       // When relinquishing a donation, the process
                       // returns to it's base priority, even if it's
                       // changed while the donated priority was held.
    struct list donors; // List to keep track of which threads donated
                        // a higher priority to the thread.
    struct thread * donee; // The thread that received a donation
    struct list_elem donor_elem; // the donor element in another thread's
                                 // donors list.
}

// threads/thread.c
static struct list ready_priority_lists[NUM_PRIORITIES];
        // A separate list of threads for each priority level. This is in
        // place of struct list ready_list.

void add_to_ready_queue(struct thread *t);
        // A helper function to add a thread to the correct ready list

>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation.  (Alternately, submit a
>> .png file.)

   Thread 1 is donating its priority to Thread 2

        +----------------------------------------------------------+
        |                       thread_1                           |
        +----------------------------------------------------------+
        |                                                          |
        |   +-------------------+  +---------------------------+   |
        |   |   donors (list)   |  |   donee (struct thread*)  |---+--\
        |   +-------------------+  +---------------------------+   |  |
        |   |      donor_1      |  |   donor_elem (list_elem)  |   |  |
        |   |      donor_2      |  +------------+--------------+   |  |
        |   |      ....         |               ^                  |  |
        |   |      donor_N      |               |                  |  |
        |   +-------------------+               |                  |  |
        |                                       |                  |  |
        +---------------------------------------+------------------+  |
     ___________________________________________/                     |
    /                                                                 |
    |   +----------------------------------------------------------+  |
    |   |                       thread_2                           |<-/
    |   +----------------------------------------------------------+
    |   |                                                          |
    |   |   +-------------------+  +---------------------------+   |
    |   |   |   donors (list)   |  |   donee (struct thread*)  |---+--\
    |   |   +-------------------+  +---------------------------+   |  |
    |   |   |      donor_1      |  |   donor_elem (list_elem)  |   |  |
    +---+---+----> donor_2      |  +---------------------------+   |  |
        |   |      ....         |               ^                  |  |
        |   |      donor_N      |               |                  |  |
        |   +-------------------+               |                  |  |
        |                                       |                  |  |
        +---------------------------------------+------------------+  |
     ___________________________________________/                     |
    /                                                                 |
    |   +----------------------------------------------------------+  |
    |   |                       thread_3                           |<-/
    |   +----------------------------------------------------------+
    |   |                                                          |
    |   |   +-------------------+  +---------------------------+   |
    |   |   |   donors (list)   |  |   donee (struct thread*)  |   |
    |   |   +-------------------+  +---------------------------+   |
    +---+---+----> donor_1      |  |   donor_elem (list_elem)  |   |
        |   |      donor_2      |  +---------------------------+   |
        |   |      ....         |                                  |
        |   |      donor_N      |                                  |
        |   +-------------------+                                  |
        |                                                          |
        +----------------------------------------------------------+

Each thread keeps track of two sets of things. A list of its donors and,
if applicable, a pointer to the thread the specified thread is donating
priority to. Note that a given thread can only be waiting on one lock
at a time, so it can only have one donee and be a member of one donor
list.

---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

All threads waiting on a semaphore are unblocked when the semaphore is
upped, and the priority scheduler takes care of running the highest
priority thread.

Since we have a seperate list for each priority, we iterate through each
list by highest priority first.

In the case of condition variables, we iterate over the list of waiters
in the cond, find the semaphore with the highest priority process waiting
on the semaphore, and then up that semaphore.

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

First we disable interrupts so we can find out which thread is holding a
lock without worrying about concurrency. If another thread is holding the
lock, we wish to donate priority to that thread.

If the donor has a higher priority than the donee, set the donee field of
the donor to point to the donee, and add the donor_elem of the donor to
the donee's donors list. Then tell the donee to update its priority based
on its new list of donors.

When a thread is updating its priority, it sets effective priority to the
maximum of its base priority and the effective priorities of all its donors.
It then tells its donee to update its priority as well. This is where we
handle nested donation.

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

All priority donation handling happens in sema_up. When sema_up is called
on the semaphore in a lock, it first disables interrupts and iterates
over the list of threads waiting on the semaphore. It removes the thread
from the list of waiters and unblocks the thread. If the thread's donee
field is set, it must have donated priority to something. Since it is
waiting on the semaphore currently being upped, the waiting thread must
have donated priority to the current process. Remove the waiting thread's
donor element from whatever donors list it's in and set donee to NULL.

After the loop, all waiting threads have been woken up, including any
donors waiting on the current lock, so recalculate the current thread's
priority.

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

Within thread_set_priority, the thread is modifying it's own base 
priority. When it fininshed and then updates it's effective priority, 
against the donated priorities, it disables interrupts for that step.

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

TODO: Keegan

                          ADVANCED SCHEDULER
                          ==================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

// threads/threads.h
struct thread {
    int niceness; // Niceness, as used by the advanced scheduler.
    fixed recent_cpu; // Recent CPU usage of the thread
}

// threads/fixed_point.[ch]
functions to simplify the fixed-point arithmetic

---- ALGORITHMS ----

>> C2: Suppose threads A, B, and C have nice values 0, 1, and 2.  Each
>> has a recent_cpu value of 0.  Fill in the table below showing the
>> scheduling decision and the priority and recent_cpu values for each
>> thread after each given number of timer ticks:

timer  recent_cpu    priority   thread
ticks   A   B   C   A   B   C   to run
-----  --  --  --  --  --  --   ------
 0      0   0   0  63  61  59     A                                                        
 4      4   0   0  62  61  59     A                                                         
 8      8   0   0  61  61  59     B                                                        
12      8   4   0  61  60  59     A                                                               
16     12   4   0  60  60  59     B                                                        
20     12   8   0  60  59  59     A                                                        
24     16   8   0  59  59  59     C                                                      
28     16   8   4  59  59  58     B                                                        
32     16  12   4  59  58  58     A                                                        
36     20  12   4  58  58  58     C                                                       

>> C3: Did any ambiguities in the scheduler specification make values
>> in the table uncertain?  If so, what rule did you use to resolve
>> them?  Does this match the behavior of your scheduler?

When there are multiple threads with the same priproty, they are 
scheduled in round-robin order. Thus, when threads A and B both have the 
same priority, the running thread changes from A to B.

>> C4: How is the way you divided the cost of scheduling between code
>> inside and outside interrupt context likely to affect performance?

TODO

---- RATIONALE ----

>> C5: Briefly critique your design, pointing out advantages and
>> disadvantages in your design choices.  If you were to have extra
>> time to work on this part of the project, how might you choose to
>> refine or improve your design?

TODO

>> C6: The assignment explains arithmetic for fixed-point math in
>> detail, but it leaves it open to you to implement it.  Why did you
>> decide to implement it the way you did?  If you created an
>> abstraction layer for fixed-point math, that is, an abstract data
>> type and/or a set of functions or macros to manipulate fixed-point
>> numbers, why did you do so?  If not, why not?

Creating an abstraction for the fixed-point math in their own files made
calculating the necessary values for the scheduler easier to code. 

                           SURVEY QUESTIONS
                           ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the feedback survey on the course
website.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
